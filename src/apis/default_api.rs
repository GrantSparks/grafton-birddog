/*
 * BirdDog RESTful API 2.0
 *
 * Unofficial idiomatic rust bindings for the BirdDog RESTful API 2.0 generated using OpenAPI Generator.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`about_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AboutGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`analogaudiosetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnalogaudiosetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`analogaudiosetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AnalogaudiosetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogadvancesetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogadvancesetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogadvancesetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogadvancesetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogcmsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogcmsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogcmsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogcmsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogdetsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogdetsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogdetsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogdetsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogexpsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogexpsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogexpsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogexpsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogexternalsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogexternalsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogexternalsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogexternalsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddoggammasetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddoggammasetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddoggammasetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddoggammasetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogpicsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogpicsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogpicsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogpicsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogptzsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogptzsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogptzsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogptzsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogsil2codec_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Birddogsil2codecGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogsil2codec_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Birddogsil2codecPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogsil2enc_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Birddogsil2encGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogsil2enc_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Birddogsil2encPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogwbsetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogwbsetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`birddogwbsetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BirddogwbsetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`capture_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CaptureGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`connect_to_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConnectToGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`connect_to_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ConnectToPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decode_transport_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecodeTransportGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decode_transport_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecodeTransportPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decodesetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecodesetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decodesetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecodesetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`decodestatus_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DecodestatusGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`encode_transport_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EncodeTransportGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`encode_transport_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EncodeTransportPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`encodesetup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EncodesetupGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`encodesetup_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EncodesetupPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`hostname_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HostnameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_dis_server_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiDisServerGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_dis_server_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiDisServerPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_grp_name_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiGrpNameGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_grp_name_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiGrpNamePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_off_sn_src_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiOffSnSrcGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`n_di_off_sn_src_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NDiOffSnSrcPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`operationmode_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OperationmodeGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`operationmode_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OperationmodePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reboot_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RebootGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reboot_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RebootPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`recall_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RecallPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refresh_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefreshGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refresh_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefreshPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reset_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reset_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`restart_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RestartGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`restart_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RestartPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`save_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SavePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`version_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VersionGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`videooutputinterface_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideooutputinterfaceGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`videooutputinterface_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VideooutputinterfacePostError {
    UnknownValue(serde_json::Value),
}


pub async fn about_get(configuration: &configuration::Configuration, firmware_version: Option<&str>, format: Option<&str>, host_name: Option<&str>, ip_address: Option<&str>, network_config_method: Option<&str>, serial_number: Option<&str>, status: Option<&str>) -> Result<models::AboutGet200Response, Error<AboutGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/about", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = firmware_version {
        local_var_req_builder = local_var_req_builder.query(&[("FirmwareVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = format {
        local_var_req_builder = local_var_req_builder.header("Format", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = host_name {
        local_var_req_builder = local_var_req_builder.header("HostName", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = ip_address {
        local_var_req_builder = local_var_req_builder.header("IPAddress", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = network_config_method {
        local_var_req_builder = local_var_req_builder.header("NetworkConfigMethod", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = serial_number {
        local_var_req_builder = local_var_req_builder.header("SerialNumber", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = status {
        local_var_req_builder = local_var_req_builder.header("Status", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AboutGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn analogaudiosetup_get(configuration: &configuration::Configuration, analog_audio_in_gain: Option<&str>, analog_audio_out_gain: Option<&str>, analog_audiooutputselect: Option<&str>) -> Result<models::AnalogaudiosetupGet200Response, Error<AnalogaudiosetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/analogaudiosetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = analog_audio_in_gain {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudioInGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = analog_audio_out_gain {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudioOutGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = analog_audiooutputselect {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudiooutputselect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnalogaudiosetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn analogaudiosetup_post(configuration: &configuration::Configuration, analogaudiosetup_post_request: models::AnalogaudiosetupPostRequest, analog_audio_in_gain: Option<&str>, analog_audio_out_gain: Option<&str>, analog_audiooutputselect: Option<&str>) -> Result<models::AnalogaudiosetupGet200Response, Error<AnalogaudiosetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/analogaudiosetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = analog_audio_in_gain {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudioInGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = analog_audio_out_gain {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudioOutGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = analog_audiooutputselect {
        local_var_req_builder = local_var_req_builder.query(&[("AnalogAudiooutputselect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&analogaudiosetup_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AnalogaudiosetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogadvancesetup_get(configuration: &configuration::Configuration, brightness: Option<&str>, brightness_comp: Option<&str>, comp_level: Option<&str>, gamma_offset: Option<&str>, high_resolution: Option<&str>, video_enhancement: Option<&str>) -> Result<models::BirddogadvancesetupGet200Response, Error<BirddogadvancesetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogadvancesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = brightness {
        local_var_req_builder = local_var_req_builder.query(&[("Brightness", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = brightness_comp {
        local_var_req_builder = local_var_req_builder.query(&[("BrightnessComp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = comp_level {
        local_var_req_builder = local_var_req_builder.query(&[("CompLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gamma_offset {
        local_var_req_builder = local_var_req_builder.query(&[("GammaOffset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_resolution {
        local_var_req_builder = local_var_req_builder.query(&[("HighResolution", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_enhancement {
        local_var_req_builder = local_var_req_builder.query(&[("VideoEnhancement", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogadvancesetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogadvancesetup_post(configuration: &configuration::Configuration, birddogadvancesetup_get200_response: models::BirddogadvancesetupGet200Response, brightness: Option<&str>, brightness_comp: Option<&str>, comp_level: Option<&str>, gamma_offset: Option<&str>, high_resolution: Option<&str>, video_enhancement: Option<&str>) -> Result<models::BirddogadvancesetupGet200Response, Error<BirddogadvancesetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogadvancesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = brightness {
        local_var_req_builder = local_var_req_builder.query(&[("Brightness", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = brightness_comp {
        local_var_req_builder = local_var_req_builder.query(&[("BrightnessComp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = comp_level {
        local_var_req_builder = local_var_req_builder.query(&[("CompLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gamma_offset {
        local_var_req_builder = local_var_req_builder.query(&[("GammaOffset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_resolution {
        local_var_req_builder = local_var_req_builder.query(&[("HighResolution", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_enhancement {
        local_var_req_builder = local_var_req_builder.query(&[("VideoEnhancement", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogadvancesetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogadvancesetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogcmsetup_get(configuration: &configuration::Configuration, blue_gain: Option<&str>, blue_hue: Option<&str>, colour_gain: Option<&str>, cyan_gain: Option<&str>, cyan_hue: Option<&str>, green_gain: Option<&str>, green_hue: Option<&str>, hue_phase: Option<&str>, mag_gain: Option<&str>, mag_hue: Option<&str>, red_gain: Option<&str>, red_hue: Option<&str>, yellow_gain: Option<&str>, yellow_hue: Option<&str>) -> Result<models::BirddogcmsetupGet200Response, Error<BirddogcmsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogcmsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = blue_gain {
        local_var_req_builder = local_var_req_builder.query(&[("BlueGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blue_hue {
        local_var_req_builder = local_var_req_builder.query(&[("BlueHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = colour_gain {
        local_var_req_builder = local_var_req_builder.query(&[("ColourGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cyan_gain {
        local_var_req_builder = local_var_req_builder.query(&[("CyanGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cyan_hue {
        local_var_req_builder = local_var_req_builder.query(&[("CyanHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = green_gain {
        local_var_req_builder = local_var_req_builder.query(&[("GreenGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = green_hue {
        local_var_req_builder = local_var_req_builder.query(&[("GreenHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hue_phase {
        local_var_req_builder = local_var_req_builder.query(&[("HuePhase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mag_gain {
        local_var_req_builder = local_var_req_builder.query(&[("MagGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mag_hue {
        local_var_req_builder = local_var_req_builder.query(&[("MagHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_gain {
        local_var_req_builder = local_var_req_builder.query(&[("RedGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_hue {
        local_var_req_builder = local_var_req_builder.query(&[("RedHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yellow_gain {
        local_var_req_builder = local_var_req_builder.query(&[("YellowGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yellow_hue {
        local_var_req_builder = local_var_req_builder.query(&[("YellowHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogcmsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogcmsetup_post(configuration: &configuration::Configuration, birddogcmsetup_get200_response: models::BirddogcmsetupGet200Response, blue_gain: Option<&str>, blue_hue: Option<&str>, colour_gain: Option<&str>, cyan_gain: Option<&str>, cyan_hue: Option<&str>, green_gain: Option<&str>, green_hue: Option<&str>, hue_phase: Option<&str>, mag_gain: Option<&str>, mag_hue: Option<&str>, red_gain: Option<&str>, red_hue: Option<&str>, yellow_gain: Option<&str>, yellow_hue: Option<&str>) -> Result<models::BirddogcmsetupGet200Response, Error<BirddogcmsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogcmsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = blue_gain {
        local_var_req_builder = local_var_req_builder.query(&[("BlueGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blue_hue {
        local_var_req_builder = local_var_req_builder.query(&[("BlueHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = colour_gain {
        local_var_req_builder = local_var_req_builder.query(&[("ColourGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cyan_gain {
        local_var_req_builder = local_var_req_builder.query(&[("CyanGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cyan_hue {
        local_var_req_builder = local_var_req_builder.query(&[("CyanHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = green_gain {
        local_var_req_builder = local_var_req_builder.query(&[("GreenGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = green_hue {
        local_var_req_builder = local_var_req_builder.query(&[("GreenHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hue_phase {
        local_var_req_builder = local_var_req_builder.query(&[("HuePhase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mag_gain {
        local_var_req_builder = local_var_req_builder.query(&[("MagGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mag_hue {
        local_var_req_builder = local_var_req_builder.query(&[("MagHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_gain {
        local_var_req_builder = local_var_req_builder.query(&[("RedGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_hue {
        local_var_req_builder = local_var_req_builder.query(&[("RedHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yellow_gain {
        local_var_req_builder = local_var_req_builder.query(&[("YellowGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yellow_hue {
        local_var_req_builder = local_var_req_builder.query(&[("YellowHue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogcmsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogcmsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogdetsetup_get(configuration: &configuration::Configuration, bandwidth: Option<&str>, bw_balance: Option<&str>, crispening: Option<&str>, detail: Option<&str>, high_light_detail: Option<&str>, hv_balance: Option<&str>, limit: Option<&str>, super_low: Option<&str>) -> Result<models::BirddogdetsetupGet200Response, Error<BirddogdetsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogdetsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = bandwidth {
        local_var_req_builder = local_var_req_builder.query(&[("Bandwidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bw_balance {
        local_var_req_builder = local_var_req_builder.query(&[("BwBalance", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crispening {
        local_var_req_builder = local_var_req_builder.query(&[("Crispening", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = detail {
        local_var_req_builder = local_var_req_builder.query(&[("Detail", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_light_detail {
        local_var_req_builder = local_var_req_builder.query(&[("HighLightDetail", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hv_balance {
        local_var_req_builder = local_var_req_builder.query(&[("HvBalance", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("Limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = super_low {
        local_var_req_builder = local_var_req_builder.query(&[("SuperLow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogdetsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogdetsetup_post(configuration: &configuration::Configuration, birddogdetsetup_get200_response: models::BirddogdetsetupGet200Response, bandwidth: Option<&str>, bw_balance: Option<&str>, crispening: Option<&str>, detail: Option<&str>, high_light_detail: Option<&str>, hv_balance: Option<&str>, limit: Option<&str>, super_low: Option<&str>) -> Result<models::BirddogdetsetupGet200Response, Error<BirddogdetsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogdetsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = bandwidth {
        local_var_req_builder = local_var_req_builder.query(&[("Bandwidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bw_balance {
        local_var_req_builder = local_var_req_builder.query(&[("BwBalance", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crispening {
        local_var_req_builder = local_var_req_builder.query(&[("Crispening", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = detail {
        local_var_req_builder = local_var_req_builder.query(&[("Detail", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_light_detail {
        local_var_req_builder = local_var_req_builder.query(&[("HighLightDetail", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hv_balance {
        local_var_req_builder = local_var_req_builder.query(&[("HvBalance", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("Limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = super_low {
        local_var_req_builder = local_var_req_builder.query(&[("SuperLow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogdetsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogdetsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogexpsetup_get(configuration: &configuration::Configuration, ae_response: Option<&str>, back_light: Option<&str>, bright_level: Option<&str>, exp_comp_en: Option<&str>, exp_comp_lvl: Option<&str>, exp_mode: Option<&str>, gain_level: Option<&str>, gain_limit: Option<&str>, gain_point: Option<&str>, gain_point_position: Option<&str>, high_sensitivity: Option<&str>, iris_level: Option<&str>, shutter_control_overwrite: Option<&str>, shutter_max_speed: Option<&str>, shutter_min_speed: Option<&str>, shutter_speed: Option<&str>, shutter_speed_overwrite: Option<&str>, slow_shutter_en: Option<&str>, slow_shutter_limit: Option<&str>, spotlight: Option<&str>) -> Result<models::BirddogexpsetupGet200Response, Error<BirddogexpsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogexpsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ae_response {
        local_var_req_builder = local_var_req_builder.query(&[("AeResponse", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = back_light {
        local_var_req_builder = local_var_req_builder.query(&[("BackLight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bright_level {
        local_var_req_builder = local_var_req_builder.query(&[("BrightLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_comp_en {
        local_var_req_builder = local_var_req_builder.query(&[("ExpCompEn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_comp_lvl {
        local_var_req_builder = local_var_req_builder.query(&[("ExpCompLvl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ExpMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_level {
        local_var_req_builder = local_var_req_builder.query(&[("GainLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_limit {
        local_var_req_builder = local_var_req_builder.query(&[("GainLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_point {
        local_var_req_builder = local_var_req_builder.query(&[("GainPoint", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_point_position {
        local_var_req_builder = local_var_req_builder.query(&[("GainPointPosition", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_sensitivity {
        local_var_req_builder = local_var_req_builder.query(&[("HighSensitivity", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = iris_level {
        local_var_req_builder = local_var_req_builder.query(&[("IrisLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_control_overwrite {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterControlOverwrite", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_max_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterMaxSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_min_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterMinSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_speed_overwrite {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterSpeedOverwrite", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slow_shutter_en {
        local_var_req_builder = local_var_req_builder.query(&[("SlowShutterEn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slow_shutter_limit {
        local_var_req_builder = local_var_req_builder.query(&[("SlowShutterLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = spotlight {
        local_var_req_builder = local_var_req_builder.query(&[("Spotlight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogexpsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogexpsetup_post(configuration: &configuration::Configuration, birddogexpsetup_get200_response: models::BirddogexpsetupGet200Response, ae_response: Option<&str>, back_light: Option<&str>, bright_level: Option<&str>, exp_comp_en: Option<&str>, exp_comp_lvl: Option<&str>, exp_mode: Option<&str>, gain_level: Option<&str>, gain_limit: Option<&str>, gain_point: Option<&str>, gain_point_position: Option<&str>, high_sensitivity: Option<&str>, iris_level: Option<&str>, shutter_control_overwrite: Option<&str>, shutter_max_speed: Option<&str>, shutter_min_speed: Option<&str>, shutter_speed: Option<&str>, shutter_speed_overwrite: Option<&str>, slow_shutter_en: Option<&str>, slow_shutter_limit: Option<&str>, spotlight: Option<&str>) -> Result<models::BirddogexpsetupGet200Response, Error<BirddogexpsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogexpsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ae_response {
        local_var_req_builder = local_var_req_builder.query(&[("AeResponse", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = back_light {
        local_var_req_builder = local_var_req_builder.query(&[("BackLight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bright_level {
        local_var_req_builder = local_var_req_builder.query(&[("BrightLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_comp_en {
        local_var_req_builder = local_var_req_builder.query(&[("ExpCompEn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_comp_lvl {
        local_var_req_builder = local_var_req_builder.query(&[("ExpCompLvl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exp_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ExpMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_level {
        local_var_req_builder = local_var_req_builder.query(&[("GainLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_limit {
        local_var_req_builder = local_var_req_builder.query(&[("GainLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_point {
        local_var_req_builder = local_var_req_builder.query(&[("GainPoint", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gain_point_position {
        local_var_req_builder = local_var_req_builder.query(&[("GainPointPosition", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = high_sensitivity {
        local_var_req_builder = local_var_req_builder.query(&[("HighSensitivity", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = iris_level {
        local_var_req_builder = local_var_req_builder.query(&[("IrisLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_control_overwrite {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterControlOverwrite", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_max_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterMaxSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_min_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterMinSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shutter_speed_overwrite {
        local_var_req_builder = local_var_req_builder.query(&[("ShutterSpeedOverwrite", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slow_shutter_en {
        local_var_req_builder = local_var_req_builder.query(&[("SlowShutterEn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slow_shutter_limit {
        local_var_req_builder = local_var_req_builder.query(&[("SlowShutterLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = spotlight {
        local_var_req_builder = local_var_req_builder.query(&[("Spotlight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogexpsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogexpsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogexternalsetup_get(configuration: &configuration::Configuration, aux: Option<&str>, rain_wiper: Option<&str>, v12v_out: Option<&str>) -> Result<models::BirddogexternalsetupGet200Response, Error<BirddogexternalsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogexternalsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = aux {
        local_var_req_builder = local_var_req_builder.query(&[("Aux", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rain_wiper {
        local_var_req_builder = local_var_req_builder.query(&[("RainWiper", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = v12v_out {
        local_var_req_builder = local_var_req_builder.query(&[("V12vOut", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogexternalsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogexternalsetup_post(configuration: &configuration::Configuration, birddogexternalsetup_get200_response: models::BirddogexternalsetupGet200Response, aux: Option<&str>, rain_wiper: Option<&str>, v12v_out: Option<&str>) -> Result<models::BirddogexternalsetupGet200Response, Error<BirddogexternalsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogexternalsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = aux {
        local_var_req_builder = local_var_req_builder.query(&[("Aux", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rain_wiper {
        local_var_req_builder = local_var_req_builder.query(&[("RainWiper", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = v12v_out {
        local_var_req_builder = local_var_req_builder.query(&[("V12vOut", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogexternalsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogexternalsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddoggammasetup_get(configuration: &configuration::Configuration, black_gamma_level: Option<&str>, black_level: Option<&str>, black_level_range: Option<&str>, effect: Option<&str>, level: Option<&str>, offset: Option<&str>, pattern: Option<&str>, pattern_fine: Option<&str>, settings: Option<&str>, visibility_enhancer: Option<&str>) -> Result<models::BirddoggammasetupGet200Response, Error<BirddoggammasetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddoggammasetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = black_gamma_level {
        local_var_req_builder = local_var_req_builder.query(&[("BlackGammaLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = black_level {
        local_var_req_builder = local_var_req_builder.query(&[("BlackLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = black_level_range {
        local_var_req_builder = local_var_req_builder.query(&[("BlackLevelRange", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = effect {
        local_var_req_builder = local_var_req_builder.query(&[("Effect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("Level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("Offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pattern {
        local_var_req_builder = local_var_req_builder.query(&[("Pattern", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pattern_fine {
        local_var_req_builder = local_var_req_builder.query(&[("PatternFine", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = settings {
        local_var_req_builder = local_var_req_builder.query(&[("Settings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = visibility_enhancer {
        local_var_req_builder = local_var_req_builder.query(&[("VisibilityEnhancer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddoggammasetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddoggammasetup_post(configuration: &configuration::Configuration, birddoggammasetup_get200_response: models::BirddoggammasetupGet200Response, black_gamma_level: Option<&str>, black_level: Option<&str>, black_level_range: Option<&str>, effect: Option<&str>, level: Option<&str>, offset: Option<&str>, pattern: Option<&str>, pattern_fine: Option<&str>, settings: Option<&str>, visibility_enhancer: Option<&str>) -> Result<models::BirddoggammasetupGet200Response, Error<BirddoggammasetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddoggammasetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = black_gamma_level {
        local_var_req_builder = local_var_req_builder.query(&[("BlackGammaLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = black_level {
        local_var_req_builder = local_var_req_builder.query(&[("BlackLevel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = black_level_range {
        local_var_req_builder = local_var_req_builder.query(&[("BlackLevelRange", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = effect {
        local_var_req_builder = local_var_req_builder.query(&[("Effect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("Level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("Offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pattern {
        local_var_req_builder = local_var_req_builder.query(&[("Pattern", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pattern_fine {
        local_var_req_builder = local_var_req_builder.query(&[("PatternFine", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = settings {
        local_var_req_builder = local_var_req_builder.query(&[("Settings", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = visibility_enhancer {
        local_var_req_builder = local_var_req_builder.query(&[("VisibilityEnhancer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddoggammasetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddoggammasetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogpicsetup_get(configuration: &configuration::Configuration, back_light_com: Option<&str>, chrome_suppress: Option<&str>, color: Option<&str>, contrast: Option<&str>, effect: Option<&str>, flip: Option<&str>, gamma: Option<&str>, highlight_comp: Option<&str>, highlight_comp_mask: Option<&str>, hue: Option<&str>, ir_cut_filter: Option<&str>, mirror: Option<&str>, noise_reduction: Option<&str>, sharpness: Option<&str>, stabilizer: Option<&str>, twodnr: Option<&str>, three_dnr: Option<&str>, wide_dynamic_range: Option<&str>, low_latency: Option<&str>, nd_filter: Option<&str>) -> Result<models::BirddogpicsetupGet200Response, Error<BirddogpicsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogpicsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = back_light_com {
        local_var_req_builder = local_var_req_builder.query(&[("BackLightCom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = chrome_suppress {
        local_var_req_builder = local_var_req_builder.query(&[("ChromeSuppress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("Color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contrast {
        local_var_req_builder = local_var_req_builder.query(&[("Contrast", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = effect {
        local_var_req_builder = local_var_req_builder.query(&[("Effect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flip {
        local_var_req_builder = local_var_req_builder.query(&[("Flip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gamma {
        local_var_req_builder = local_var_req_builder.query(&[("Gamma", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_comp {
        local_var_req_builder = local_var_req_builder.query(&[("HighlightComp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_comp_mask {
        local_var_req_builder = local_var_req_builder.query(&[("HighlightCompMask", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hue {
        local_var_req_builder = local_var_req_builder.query(&[("Hue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ir_cut_filter {
        local_var_req_builder = local_var_req_builder.query(&[("IRCutFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mirror {
        local_var_req_builder = local_var_req_builder.query(&[("Mirror", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = noise_reduction {
        local_var_req_builder = local_var_req_builder.query(&[("NoiseReduction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sharpness {
        local_var_req_builder = local_var_req_builder.query(&[("Sharpness", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stabilizer {
        local_var_req_builder = local_var_req_builder.query(&[("Stabilizer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = twodnr {
        local_var_req_builder = local_var_req_builder.query(&[("TWODNR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = three_dnr {
        local_var_req_builder = local_var_req_builder.query(&[("ThreeDNR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wide_dynamic_range {
        local_var_req_builder = local_var_req_builder.query(&[("WideDynamicRange", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = low_latency {
        local_var_req_builder = local_var_req_builder.query(&[("LowLatency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = nd_filter {
        local_var_req_builder = local_var_req_builder.query(&[("NDFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogpicsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogpicsetup_post(configuration: &configuration::Configuration, birddogpicsetup_get200_response: models::BirddogpicsetupGet200Response, back_light_com: Option<&str>, chrome_suppress: Option<&str>, color: Option<&str>, contrast: Option<&str>, effect: Option<&str>, flip: Option<&str>, gamma: Option<&str>, highlight_comp: Option<&str>, highlight_comp_mask: Option<&str>, hue: Option<&str>, ir_cut_filter: Option<&str>, mirror: Option<&str>, noise_reduction: Option<&str>, sharpness: Option<&str>, stabilizer: Option<&str>, twodnr: Option<&str>, three_dnr: Option<&str>, wide_dynamic_range: Option<&str>, low_latency: Option<&str>, nd_filter: Option<&str>) -> Result<models::BirddogpicsetupGet200Response, Error<BirddogpicsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogpicsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = back_light_com {
        local_var_req_builder = local_var_req_builder.query(&[("BackLightCom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = chrome_suppress {
        local_var_req_builder = local_var_req_builder.query(&[("ChromeSuppress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("Color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contrast {
        local_var_req_builder = local_var_req_builder.query(&[("Contrast", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = effect {
        local_var_req_builder = local_var_req_builder.query(&[("Effect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flip {
        local_var_req_builder = local_var_req_builder.query(&[("Flip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gamma {
        local_var_req_builder = local_var_req_builder.query(&[("Gamma", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_comp {
        local_var_req_builder = local_var_req_builder.query(&[("HighlightComp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = highlight_comp_mask {
        local_var_req_builder = local_var_req_builder.query(&[("HighlightCompMask", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hue {
        local_var_req_builder = local_var_req_builder.query(&[("Hue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ir_cut_filter {
        local_var_req_builder = local_var_req_builder.query(&[("IRCutFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mirror {
        local_var_req_builder = local_var_req_builder.query(&[("Mirror", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = noise_reduction {
        local_var_req_builder = local_var_req_builder.query(&[("NoiseReduction", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sharpness {
        local_var_req_builder = local_var_req_builder.query(&[("Sharpness", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stabilizer {
        local_var_req_builder = local_var_req_builder.query(&[("Stabilizer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = twodnr {
        local_var_req_builder = local_var_req_builder.query(&[("TWODNR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = three_dnr {
        local_var_req_builder = local_var_req_builder.query(&[("ThreeDNR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wide_dynamic_range {
        local_var_req_builder = local_var_req_builder.query(&[("WideDynamicRange", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = low_latency {
        local_var_req_builder = local_var_req_builder.query(&[("LowLatency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = nd_filter {
        local_var_req_builder = local_var_req_builder.query(&[("NDFilter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogpicsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogpicsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogptzsetup_get(configuration: &configuration::Configuration, pan_speed: Option<&str>, tilt_speed: Option<&str>, zoom_speed: Option<&str>) -> Result<models::BirddogptzsetupGet200Response, Error<BirddogptzsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogptzsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = pan_speed {
        local_var_req_builder = local_var_req_builder.query(&[("PanSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tilt_speed {
        local_var_req_builder = local_var_req_builder.query(&[("TiltSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = zoom_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ZoomSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogptzsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogptzsetup_post(configuration: &configuration::Configuration, birddogptzsetup_get200_response: models::BirddogptzsetupGet200Response, pan_speed: Option<&str>, tilt_speed: Option<&str>, zoom_speed: Option<&str>) -> Result<models::BirddogptzsetupGet200Response, Error<BirddogptzsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogptzsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = pan_speed {
        local_var_req_builder = local_var_req_builder.query(&[("PanSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tilt_speed {
        local_var_req_builder = local_var_req_builder.query(&[("TiltSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = zoom_speed {
        local_var_req_builder = local_var_req_builder.query(&[("ZoomSpeed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogptzsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogptzsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogsil2codec_get(configuration: &configuration::Configuration, protocol: Option<&str>, selected_mode: Option<&str>, quant_factor_i: Option<&str>, quant_factor_p: Option<&str>, gop_size: Option<&str>, bitrate: Option<&str>) -> Result<models::Birddogsil2codecGet200Response, Error<Birddogsil2codecGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogsil2codec", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = protocol {
        local_var_req_builder = local_var_req_builder.query(&[("Protocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = selected_mode {
        local_var_req_builder = local_var_req_builder.query(&[("SelectedMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quant_factor_i {
        local_var_req_builder = local_var_req_builder.query(&[("QuantFactorI", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quant_factor_p {
        local_var_req_builder = local_var_req_builder.query(&[("QuantFactorP", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gop_size {
        local_var_req_builder = local_var_req_builder.query(&[("GOPSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("Bitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Birddogsil2codecGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogsil2codec_post(configuration: &configuration::Configuration, birddogsil2codec_post_request: models::Birddogsil2codecPostRequest, protocol: Option<&str>, bitrate_control: Option<&str>, mode_sel: Option<&str>, quant_factor_i: Option<&str>, quant_factor_p: Option<&str>, gop_size: Option<&str>, bitrate: Option<&str>) -> Result<models::Birddogsil2codecGet200Response, Error<Birddogsil2codecPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogsil2codec", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = protocol {
        local_var_req_builder = local_var_req_builder.query(&[("Protocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bitrate_control {
        local_var_req_builder = local_var_req_builder.query(&[("BitrateControl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode_sel {
        local_var_req_builder = local_var_req_builder.query(&[("ModeSel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quant_factor_i {
        local_var_req_builder = local_var_req_builder.query(&[("QuantFactorI", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quant_factor_p {
        local_var_req_builder = local_var_req_builder.query(&[("QuantFactorP", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gop_size {
        local_var_req_builder = local_var_req_builder.query(&[("GOPSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bitrate {
        local_var_req_builder = local_var_req_builder.query(&[("Bitrate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogsil2codec_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Birddogsil2codecPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogsil2enc_get(configuration: &configuration::Configuration, streaming_protocol: Option<&str>, port: Option<&str>, stream_name: Option<&str>, auth_enable: Option<&str>, user_name: Option<&str>, password: Option<&str>, ip_address: Option<&str>, mode: Option<&str>, latency: Option<&str>, encryption: Option<&str>, passphrase: Option<&str>, pbkeylen: Option<&str>, streamid: Option<&str>, server_selection: Option<&str>, stream_key_local: Option<&str>, stream_key_remote: Option<&str>, server: Option<&str>, hai_vision_player_support: Option<&str>) -> Result<models::Birddogsil2encGet200Response, Error<Birddogsil2encGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogsil2enc", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = streaming_protocol {
        local_var_req_builder = local_var_req_builder.query(&[("Streaming Protocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port {
        local_var_req_builder = local_var_req_builder.query(&[("Port", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_name {
        local_var_req_builder = local_var_req_builder.query(&[("Stream Name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = auth_enable {
        local_var_req_builder = local_var_req_builder.query(&[("AuthEnable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name {
        local_var_req_builder = local_var_req_builder.query(&[("UserName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = password {
        local_var_req_builder = local_var_req_builder.query(&[("Password", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ip_address {
        local_var_req_builder = local_var_req_builder.query(&[("IPAddress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder = local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latency {
        local_var_req_builder = local_var_req_builder.query(&[("latency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = encryption {
        local_var_req_builder = local_var_req_builder.query(&[("Encryption", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = passphrase {
        local_var_req_builder = local_var_req_builder.query(&[("passphrase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pbkeylen {
        local_var_req_builder = local_var_req_builder.query(&[("pbkeylen", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = streamid {
        local_var_req_builder = local_var_req_builder.query(&[("streamid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server_selection {
        local_var_req_builder = local_var_req_builder.query(&[("Server Selection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_key_local {
        local_var_req_builder = local_var_req_builder.query(&[("StreamKeyLocal", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_key_remote {
        local_var_req_builder = local_var_req_builder.query(&[("StreamKeyRemote", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server {
        local_var_req_builder = local_var_req_builder.query(&[("Server", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hai_vision_player_support {
        local_var_req_builder = local_var_req_builder.query(&[("HaiVisionPlayerSupport", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Birddogsil2encGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogsil2enc_post(configuration: &configuration::Configuration, birddogsil2enc_get200_response: models::Birddogsil2encGet200Response, streaming_protocol: Option<&str>, port: Option<&str>, stream_name: Option<&str>, auth_enable: Option<&str>, user_name: Option<&str>, password: Option<&str>, ip_address: Option<&str>, mode: Option<&str>, latency: Option<&str>, encryption: Option<&str>, passphrase: Option<&str>, pbkeylen: Option<&str>, streamid: Option<&str>, server_selection: Option<&str>, stream_key_local: Option<&str>, stream_key_remote: Option<&str>, server: Option<&str>, hai_vision_player_support: Option<&str>) -> Result<models::Birddogsil2encGet200Response, Error<Birddogsil2encPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogsil2enc", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = streaming_protocol {
        local_var_req_builder = local_var_req_builder.query(&[("Streaming Protocol", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = port {
        local_var_req_builder = local_var_req_builder.query(&[("Port", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_name {
        local_var_req_builder = local_var_req_builder.query(&[("Stream Name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = auth_enable {
        local_var_req_builder = local_var_req_builder.query(&[("AuthEnable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name {
        local_var_req_builder = local_var_req_builder.query(&[("UserName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = password {
        local_var_req_builder = local_var_req_builder.query(&[("Password", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ip_address {
        local_var_req_builder = local_var_req_builder.query(&[("IPAddress", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder = local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latency {
        local_var_req_builder = local_var_req_builder.query(&[("latency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = encryption {
        local_var_req_builder = local_var_req_builder.query(&[("Encryption", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = passphrase {
        local_var_req_builder = local_var_req_builder.query(&[("passphrase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pbkeylen {
        local_var_req_builder = local_var_req_builder.query(&[("pbkeylen", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = streamid {
        local_var_req_builder = local_var_req_builder.query(&[("streamid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server_selection {
        local_var_req_builder = local_var_req_builder.query(&[("Server Selection", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_key_local {
        local_var_req_builder = local_var_req_builder.query(&[("StreamKeyLocal", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_key_remote {
        local_var_req_builder = local_var_req_builder.query(&[("StreamKeyRemote", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = server {
        local_var_req_builder = local_var_req_builder.query(&[("Server", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = hai_vision_player_support {
        local_var_req_builder = local_var_req_builder.query(&[("HaiVisionPlayerSupport", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogsil2enc_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Birddogsil2encPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogwbsetup_get(configuration: &configuration::Configuration, bg: Option<&str>, br: Option<&str>, blue_gain: Option<&str>, color_temp: Option<&str>, gb: Option<&str>, gr: Option<&str>, level: Option<&str>, matrix: Option<&str>, offset: Option<&str>, phase: Option<&str>, rb: Option<&str>, rg: Option<&str>, red_gain: Option<&str>, select: Option<&str>, speed: Option<&str>, wb_mode: Option<&str>) -> Result<models::BirddogwbsetupGet200Response, Error<BirddogwbsetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogwbsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = bg {
        local_var_req_builder = local_var_req_builder.query(&[("BG", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = br {
        local_var_req_builder = local_var_req_builder.query(&[("BR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blue_gain {
        local_var_req_builder = local_var_req_builder.query(&[("BlueGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_temp {
        local_var_req_builder = local_var_req_builder.query(&[("ColorTemp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gb {
        local_var_req_builder = local_var_req_builder.query(&[("GB", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gr {
        local_var_req_builder = local_var_req_builder.query(&[("GR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("Level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = matrix {
        local_var_req_builder = local_var_req_builder.query(&[("Matrix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("Offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phase {
        local_var_req_builder = local_var_req_builder.query(&[("Phase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rb {
        local_var_req_builder = local_var_req_builder.query(&[("RB", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rg {
        local_var_req_builder = local_var_req_builder.query(&[("RG", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_gain {
        local_var_req_builder = local_var_req_builder.query(&[("RedGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = select {
        local_var_req_builder = local_var_req_builder.query(&[("Select", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed {
        local_var_req_builder = local_var_req_builder.query(&[("Speed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wb_mode {
        local_var_req_builder = local_var_req_builder.query(&[("WbMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogwbsetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn birddogwbsetup_post(configuration: &configuration::Configuration, birddogwbsetup_get200_response: models::BirddogwbsetupGet200Response, bg: Option<&str>, br: Option<&str>, blue_gain: Option<&str>, color_temp: Option<&str>, gb: Option<&str>, gr: Option<&str>, level: Option<&str>, matrix: Option<&str>, offset: Option<&str>, phase: Option<&str>, rb: Option<&str>, rg: Option<&str>, red_gain: Option<&str>, select: Option<&str>, speed: Option<&str>, wb_mode: Option<&str>) -> Result<models::BirddogwbsetupGet200Response, Error<BirddogwbsetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/birddogwbsetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = bg {
        local_var_req_builder = local_var_req_builder.query(&[("BG", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = br {
        local_var_req_builder = local_var_req_builder.query(&[("BR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blue_gain {
        local_var_req_builder = local_var_req_builder.query(&[("BlueGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_temp {
        local_var_req_builder = local_var_req_builder.query(&[("ColorTemp", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gb {
        local_var_req_builder = local_var_req_builder.query(&[("GB", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = gr {
        local_var_req_builder = local_var_req_builder.query(&[("GR", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("Level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = matrix {
        local_var_req_builder = local_var_req_builder.query(&[("Matrix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("Offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phase {
        local_var_req_builder = local_var_req_builder.query(&[("Phase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rb {
        local_var_req_builder = local_var_req_builder.query(&[("RB", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rg {
        local_var_req_builder = local_var_req_builder.query(&[("RG", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = red_gain {
        local_var_req_builder = local_var_req_builder.query(&[("RedGain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = select {
        local_var_req_builder = local_var_req_builder.query(&[("Select", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed {
        local_var_req_builder = local_var_req_builder.query(&[("Speed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wb_mode {
        local_var_req_builder = local_var_req_builder.query(&[("WbMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&birddogwbsetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BirddogwbsetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn capture_get(configuration: &configuration::Configuration, ch_num: Option<&str>, status: Option<&str>) -> Result<String, Error<CaptureGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/capture", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CaptureGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn connect_to_get(configuration: &configuration::Configuration, ch_num: Option<&str>, sourcename: Option<&str>, status: Option<&str>) -> Result<models::ConnectToGet200Response, Error<ConnectToGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/connectTo", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sourcename {
        local_var_req_builder = local_var_req_builder.query(&[("sourcename", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConnectToGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn connect_to_post(configuration: &configuration::Configuration, connect_to_get200_response: models::ConnectToGet200Response, ch_num: Option<&str>, sourcename: Option<&str>, status: Option<&str>) -> Result<models::ConnectToGet200Response, Error<ConnectToPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/connectTo", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sourcename {
        local_var_req_builder = local_var_req_builder.query(&[("sourcename", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&connect_to_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ConnectToPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decode_transport_get(configuration: &configuration::Configuration, rxpm: Option<&str>) -> Result<models::DecodeTransportGet200Response, Error<DecodeTransportGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/decodeTransport", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = rxpm {
        local_var_req_builder = local_var_req_builder.query(&[("rxpm", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecodeTransportGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decode_transport_post(configuration: &configuration::Configuration, decode_transport_get200_response: models::DecodeTransportGet200Response, rxpm: Option<&str>) -> Result<models::DecodeTransportGet200Response, Error<DecodeTransportPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/decodeTransport", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = rxpm {
        local_var_req_builder = local_var_req_builder.query(&[("rxpm", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&decode_transport_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecodeTransportPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decodesetup_get(configuration: &configuration::Configuration, ch_num: Option<&str>, color_space: Option<&str>, tally_mode: Option<&str>, screen_saver_mode: Option<&str>, ndi_audio: Option<&str>) -> Result<models::DecodesetupGet200Response, Error<DecodesetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/decodesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_space {
        local_var_req_builder = local_var_req_builder.query(&[("ColorSpace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tally_mode {
        local_var_req_builder = local_var_req_builder.query(&[("TallyMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = screen_saver_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ScreenSaverMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_audio {
        local_var_req_builder = local_var_req_builder.query(&[("NDIAudio", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecodesetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decodesetup_post(configuration: &configuration::Configuration, decodesetup_get200_response: models::DecodesetupGet200Response, ch_num: Option<&str>, color_space: Option<&str>, tally_mode: Option<&str>, screen_saver_mode: Option<&str>, ndi_audio: Option<&str>) -> Result<models::DecodesetupGet200Response, Error<DecodesetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/decodesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_space {
        local_var_req_builder = local_var_req_builder.query(&[("ColorSpace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tally_mode {
        local_var_req_builder = local_var_req_builder.query(&[("TallyMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = screen_saver_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ScreenSaverMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_audio {
        local_var_req_builder = local_var_req_builder.query(&[("NDIAudio", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&decodesetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecodesetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn decodestatus_get(configuration: &configuration::Configuration, ch_num: Option<&str>) -> Result<models::DecodestatusGet200Response, Error<DecodestatusGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/decodestatus", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DecodestatusGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn encode_transport_get(configuration: &configuration::Configuration, txpm: Option<&str>, txnetprefix: Option<&str>, txnetmask: Option<&str>, txmcttl: Option<&str>) -> Result<models::EncodeTransportGet200Response, Error<EncodeTransportGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/encodeTransport", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = txpm {
        local_var_req_builder = local_var_req_builder.query(&[("Txpm", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txnetprefix {
        local_var_req_builder = local_var_req_builder.query(&[("Txnetprefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txnetmask {
        local_var_req_builder = local_var_req_builder.query(&[("Txnetmask", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txmcttl {
        local_var_req_builder = local_var_req_builder.query(&[("Txmcttl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EncodeTransportGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn encode_transport_post(configuration: &configuration::Configuration, encode_transport_get200_response: models::EncodeTransportGet200Response, txpm: Option<&str>, txnetprefix: Option<&str>, txnetmask: Option<&str>, txmcttl: Option<&str>) -> Result<models::EncodeTransportGet200Response, Error<EncodeTransportPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/encodeTransport", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = txpm {
        local_var_req_builder = local_var_req_builder.query(&[("Txpm", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txnetprefix {
        local_var_req_builder = local_var_req_builder.query(&[("Txnetprefix", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txnetmask {
        local_var_req_builder = local_var_req_builder.query(&[("Txnetmask", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = txmcttl {
        local_var_req_builder = local_var_req_builder.query(&[("Txmcttl", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&encode_transport_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EncodeTransportPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn encodesetup_get(configuration: &configuration::Configuration, ch_num: Option<&str>, video_format: Option<&str>, video_sample_rate: Option<&str>, color_bit_depth: Option<&str>, stream_name: Option<&str>, ndi_audio: Option<&str>, screen_saver_mode: Option<&str>, bandwidth_mode: Option<&str>, bandwidth_select: Option<&str>, loop_tally: Option<&str>, tally_mode: Option<&str>, video_csc: Option<&str>, ndi_group: Option<&str>, ndi_group_name: Option<&str>) -> Result<models::EncodesetupGet200Response, Error<EncodesetupGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/encodesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_format {
        local_var_req_builder = local_var_req_builder.query(&[("VideoFormat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("VideoSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("ColorBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_name {
        local_var_req_builder = local_var_req_builder.query(&[("StreamName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_audio {
        local_var_req_builder = local_var_req_builder.query(&[("NDIAudio", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = screen_saver_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ScreenSaverMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bandwidth_mode {
        local_var_req_builder = local_var_req_builder.query(&[("BandwidthMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bandwidth_select {
        local_var_req_builder = local_var_req_builder.query(&[("BandwidthSelect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = loop_tally {
        local_var_req_builder = local_var_req_builder.query(&[("LoopTally", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tally_mode {
        local_var_req_builder = local_var_req_builder.query(&[("TallyMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_csc {
        local_var_req_builder = local_var_req_builder.query(&[("VideoCSC", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_group {
        local_var_req_builder = local_var_req_builder.query(&[("NDIGroup", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_group_name {
        local_var_req_builder = local_var_req_builder.query(&[("NDIGroupName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EncodesetupGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn encodesetup_post(configuration: &configuration::Configuration, encodesetup_get200_response: models::EncodesetupGet200Response, ch_num: Option<&str>, video_format: Option<&str>, video_sample_rate: Option<&str>, color_bit_depth: Option<&str>, stream_name: Option<&str>, ndi_audio: Option<&str>, screen_saver_mode: Option<&str>, bandwidth_mode: Option<&str>, bandwidth_select: Option<&str>, loop_tally: Option<&str>, tally_mode: Option<&str>, video_csc: Option<&str>, ndi_group: Option<&str>, ndi_group_name: Option<&str>) -> Result<models::EncodesetupGet200Response, Error<EncodesetupPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/encodesetup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ch_num {
        local_var_req_builder = local_var_req_builder.query(&[("ChNum", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_format {
        local_var_req_builder = local_var_req_builder.query(&[("VideoFormat", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("VideoSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("ColorBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_name {
        local_var_req_builder = local_var_req_builder.query(&[("StreamName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_audio {
        local_var_req_builder = local_var_req_builder.query(&[("NDIAudio", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = screen_saver_mode {
        local_var_req_builder = local_var_req_builder.query(&[("ScreenSaverMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bandwidth_mode {
        local_var_req_builder = local_var_req_builder.query(&[("BandwidthMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bandwidth_select {
        local_var_req_builder = local_var_req_builder.query(&[("BandwidthSelect", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = loop_tally {
        local_var_req_builder = local_var_req_builder.query(&[("LoopTally", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tally_mode {
        local_var_req_builder = local_var_req_builder.query(&[("TallyMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_csc {
        local_var_req_builder = local_var_req_builder.query(&[("VideoCSC", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_group {
        local_var_req_builder = local_var_req_builder.query(&[("NDIGroup", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_group_name {
        local_var_req_builder = local_var_req_builder.query(&[("NDIGroupName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&encodesetup_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EncodesetupPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn hostname_get(configuration: &configuration::Configuration, ) -> Result<String, Error<HostnameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/hostname", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HostnameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_get(configuration: &configuration::Configuration, ) -> Result<models::ListGet200Response, Error<ListGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/List", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_dis_server_get(configuration: &configuration::Configuration, ndi_dis_serv: Option<&str>, ndi_dis_serv_ip: Option<&str>) -> Result<models::NdiDisServerGet200Response, Error<NDiDisServerGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIDisServer", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ndi_dis_serv {
        local_var_req_builder = local_var_req_builder.query(&[("NDIDisServ", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_dis_serv_ip {
        local_var_req_builder = local_var_req_builder.query(&[("NDIDisServIP", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiDisServerGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_dis_server_post(configuration: &configuration::Configuration, ndi_dis_server_get200_response: models::NdiDisServerGet200Response, ndi_dis_serv: Option<&str>, ndi_dis_serv_ip: Option<&str>) -> Result<models::NdiDisServerGet200Response, Error<NDiDisServerPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIDisServer", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = ndi_dis_serv {
        local_var_req_builder = local_var_req_builder.query(&[("NDIDisServ", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ndi_dis_serv_ip {
        local_var_req_builder = local_var_req_builder.query(&[("NDIDisServIP", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&ndi_dis_server_get200_response);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiDisServerPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_grp_name_get(configuration: &configuration::Configuration, ) -> Result<String, Error<NDiGrpNameGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIGrpName", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiGrpNameGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_grp_name_post(configuration: &configuration::Configuration, body: &str) -> Result<String, Error<NDiGrpNamePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIGrpName", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiGrpNamePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_off_sn_src_get(configuration: &configuration::Configuration, ) -> Result<String, Error<NDiOffSnSrcGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIOffSnSrc", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiOffSnSrcGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn n_di_off_sn_src_post(configuration: &configuration::Configuration, body: &str) -> Result<String, Error<NDiOffSnSrcPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/NDIOffSnSrc", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<NDiOffSnSrcPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn operationmode_get(configuration: &configuration::Configuration, mode: Option<&str>) -> Result<String, Error<OperationmodeGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/operationmode", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = mode {
        local_var_req_builder = local_var_req_builder.header("mode", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OperationmodeGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn operationmode_post(configuration: &configuration::Configuration, body: &str, mode: Option<&str>) -> Result<String, Error<OperationmodePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/operationmode", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = mode {
        local_var_req_builder = local_var_req_builder.header("mode", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OperationmodePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn reboot_get(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RebootGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/reboot", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RebootGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn reboot_post(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RebootPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/reboot", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RebootPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn recall_post(configuration: &configuration::Configuration, recall_post_request: models::RecallPostRequest, preset: Option<&str>) -> Result<models::RecallPostRequest, Error<RecallPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/recall", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = preset {
        local_var_req_builder = local_var_req_builder.query(&[("Preset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&recall_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RecallPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn refresh_get(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RefreshGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/refresh", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RefreshGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn refresh_post(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RefreshPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/refresh", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RefreshPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn reset_get(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<ResetGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/reset", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ResetGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn reset_post(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<ResetPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/reset", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ResetPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn restart_get(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RestartGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/restart", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RestartGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn restart_post(configuration: &configuration::Configuration, ) -> Result<serde_json::Value, Error<RestartPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/restart", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RestartPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn save_post(configuration: &configuration::Configuration, recall_post_request: models::RecallPostRequest, preset: Option<&str>) -> Result<models::RecallPostRequest, Error<SavePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/save", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = preset {
        local_var_req_builder = local_var_req_builder.query(&[("Preset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&recall_post_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<SavePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn version_get(configuration: &configuration::Configuration, ) -> Result<String, Error<VersionGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/version", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VersionGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn videooutputinterface_get(configuration: &configuration::Configuration, videooutput: Option<&str>) -> Result<String, Error<VideooutputinterfaceGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videooutputinterface", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = videooutput {
        local_var_req_builder = local_var_req_builder.header("videooutput", local_var_param_value.to_string());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideooutputinterfaceGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn videooutputinterface_post(configuration: &configuration::Configuration, body: &str, videooutput: Option<&str>) -> Result<String, Error<VideooutputinterfacePostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videooutputinterface", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = videooutput {
        local_var_req_builder = local_var_req_builder.header("videooutput", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<VideooutputinterfacePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

