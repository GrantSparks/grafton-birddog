/*
 * BirdDog RESTful API
 *
 * Unofficial idiomatic rust bindings for the BirdDog RESTful API 2.0 generated using OpenAPI Generator.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Birddogsil2encPostRequest {
    /// RTSP, SRT, HX, RTMP, DISABLE
    #[serde(rename = "Streaming Protocol", skip_serializing_if = "Option::is_none")]
    pub streaming_protocol: Option<String>,
    /// RTSP or SRT Port
    #[serde(rename = "Port", skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// RTSP Stream Name
    #[serde(rename = "Stream Name", skip_serializing_if = "Option::is_none")]
    pub stream_name: Option<String>,
    /// Minimum 4 Characters
    #[serde(rename = "UserName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// Minimum 4 Characters
    #[serde(rename = "Password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// SRT IP Address
    #[serde(rename = "IPAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    /// caller, listener, rendezvous
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Range ( 80 to 8000)
    #[serde(rename = "latency", skip_serializing_if = "Option::is_none")]
    pub latency: Option<String>,
    /// true / false
    #[serde(rename = "Encryption", skip_serializing_if = "Option::is_none")]
    pub encryption: Option<String>,
    /// Text Length (10 to 79 Characters)
    #[serde(rename = "passphrase", skip_serializing_if = "Option::is_none")]
    pub passphrase: Option<String>,
    /// 16, 24, 32
    #[serde(rename = "pbkeylen", skip_serializing_if = "Option::is_none")]
    pub pbkeylen: Option<String>,
    /// upto 512
    #[serde(rename = "streamid", skip_serializing_if = "Option::is_none")]
    pub streamid: Option<String>,
    /// RTMP - local, remote
    #[serde(rename = "Server Selection", skip_serializing_if = "Option::is_none")]
    pub server_selection: Option<String>,
    /// true / false
    #[serde(rename = "AuthEnable", skip_serializing_if = "Option::is_none")]
    pub auth_enable: Option<String>,
    /// Text Length (10 to 79 Characters)
    #[serde(rename = "StreamKeyLocal", skip_serializing_if = "Option::is_none")]
    pub stream_key_local: Option<String>,
    /// Text Length (10 to 79 Characters)
    #[serde(rename = "StreamKeyRemote", skip_serializing_if = "Option::is_none")]
    pub stream_key_remote: Option<String>,
    /// Remote Server URL
    #[serde(rename = "Server", skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
    /// true / false
    #[serde(
        rename = "HaiVisionPlayerSupport",
        skip_serializing_if = "Option::is_none"
    )]
    pub hai_vision_player_support: Option<String>,
}

impl Birddogsil2encPostRequest {
    pub fn new() -> Birddogsil2encPostRequest {
        Birddogsil2encPostRequest {
            streaming_protocol: None,
            port: None,
            stream_name: None,
            user_name: None,
            password: None,
            ip_address: None,
            mode: None,
            latency: None,
            encryption: None,
            passphrase: None,
            pbkeylen: None,
            streamid: None,
            server_selection: None,
            auth_enable: None,
            stream_key_local: None,
            stream_key_remote: None,
            server: None,
            hai_vision_player_support: None,
        }
    }
}
