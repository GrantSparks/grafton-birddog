/*
 * BirdDog RESTful API 2.0
 *
 * Unofficial idiomatic rust bindings for the BirdDog RESTful API 2.0 generated using OpenAPI Generator.
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AboutGetResponse {
    #[serde(rename = "FirmwareVersion", skip_serializing_if = "Option::is_none")]
    pub firmware_version: Option<String>,
    #[serde(rename = "Format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    #[serde(rename = "HostName", skip_serializing_if = "Option::is_none")]
    pub host_name: Option<String>,
    #[serde(rename = "IPAddress", skip_serializing_if = "Option::is_none")]
    pub ip_address: Option<String>,
    #[serde(
        rename = "NetworkConfigMethod",
        skip_serializing_if = "Option::is_none"
    )]
    pub network_config_method: Option<String>,
    #[serde(rename = "NetworkMask", skip_serializing_if = "Option::is_none")]
    pub network_mask: Option<String>,
    #[serde(rename = "SerialNumber", skip_serializing_if = "Option::is_none")]
    pub serial_number: Option<String>,
    #[serde(rename = "Status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

impl AboutGetResponse {
    pub fn new() -> AboutGetResponse {
        AboutGetResponse {
            firmware_version: None,
            format: None,
            host_name: None,
            ip_address: None,
            network_config_method: None,
            network_mask: None,
            serial_number: None,
            status: None,
        }
    }
}
