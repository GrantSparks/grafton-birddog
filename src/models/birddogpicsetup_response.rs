/*
 * BirdDog RESTful API 2.0
 *
 * Unofficial idiomatic rust bindings for the BirdDog RESTful API 2.0 generated using OpenAPI Generator.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BirddogpicsetupResponse {
    #[serde(rename = "BackLightCom", skip_serializing_if = "Option::is_none")]
    pub back_light_com: Option<String>,
    #[serde(rename = "ChromeSuppress", skip_serializing_if = "Option::is_none")]
    pub chrome_suppress: Option<String>,
    #[serde(rename = "Color", skip_serializing_if = "Option::is_none")]
    pub color: Option<String>,
    #[serde(rename = "Contrast", skip_serializing_if = "Option::is_none")]
    pub contrast: Option<String>,
    #[serde(rename = "Effect", skip_serializing_if = "Option::is_none")]
    pub effect: Option<String>,
    #[serde(rename = "Flip", skip_serializing_if = "Option::is_none")]
    pub flip: Option<String>,
    #[serde(rename = "Gamma", skip_serializing_if = "Option::is_none")]
    pub gamma: Option<String>,
    #[serde(rename = "HighlightComp", skip_serializing_if = "Option::is_none")]
    pub highlight_comp: Option<String>,
    #[serde(rename = "HighlightCompMask", skip_serializing_if = "Option::is_none")]
    pub highlight_comp_mask: Option<String>,
    #[serde(rename = "Hue", skip_serializing_if = "Option::is_none")]
    pub hue: Option<String>,
    #[serde(rename = "IRCutFilter", skip_serializing_if = "Option::is_none")]
    pub ir_cut_filter: Option<String>,
    #[serde(rename = "Mirror", skip_serializing_if = "Option::is_none")]
    pub mirror: Option<String>,
    #[serde(rename = "NoiseReduction", skip_serializing_if = "Option::is_none")]
    pub noise_reduction: Option<String>,
    #[serde(rename = "Sharpness", skip_serializing_if = "Option::is_none")]
    pub sharpness: Option<String>,
    #[serde(rename = "Stabilizer", skip_serializing_if = "Option::is_none")]
    pub stabilizer: Option<String>,
    #[serde(rename = "TWODNR", skip_serializing_if = "Option::is_none")]
    pub twodnr: Option<String>,
    #[serde(rename = "ThreeDNR", skip_serializing_if = "Option::is_none")]
    pub three_dnr: Option<String>,
    #[serde(rename = "WideDynamicRange", skip_serializing_if = "Option::is_none")]
    pub wide_dynamic_range: Option<String>,
    #[serde(rename = "LowLatency", skip_serializing_if = "Option::is_none")]
    pub low_latency: Option<String>,
    #[serde(rename = "NDFilter", skip_serializing_if = "Option::is_none")]
    pub nd_filter: Option<String>,
}

impl BirddogpicsetupResponse {
    pub fn new() -> BirddogpicsetupResponse {
        BirddogpicsetupResponse {
            back_light_com: None,
            chrome_suppress: None,
            color: None,
            contrast: None,
            effect: None,
            flip: None,
            gamma: None,
            highlight_comp: None,
            highlight_comp_mask: None,
            hue: None,
            ir_cut_filter: None,
            mirror: None,
            noise_reduction: None,
            sharpness: None,
            stabilizer: None,
            twodnr: None,
            three_dnr: None,
            wide_dynamic_range: None,
            low_latency: None,
            nd_filter: None,
        }
    }
}

