/*
 * BirdDog RESTful API
 *
 * Unofficial idiomatic rust bindings for the BirdDog RESTful API 2.0 generated using OpenAPI Generator.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DecodesetupPostRequest {
    /// Channel No. Range 1 to 4
    #[serde(rename = "ChNum", skip_serializing_if = "Option::is_none")]
    pub ch_num: Option<String>,
    /// RGB, YUV
    #[serde(rename = "ColorSpace", skip_serializing_if = "Option::is_none")]
    pub color_space: Option<String>,
    /// TallyOn, TallyOff, VideoMode
    #[serde(rename = "TallyMode", skip_serializing_if = "Option::is_none")]
    pub tally_mode: Option<String>,
    /// BirdDogSS, BlackSS, CaptureSS
    #[serde(rename = "ScreenSaverMode", skip_serializing_if = "Option::is_none")]
    pub screen_saver_mode: Option<String>,
    /// NDIAudioEn, NDIAudioDis
    #[serde(rename = "NDIAudio", skip_serializing_if = "Option::is_none")]
    pub ndi_audio: Option<String>,
}

impl DecodesetupPostRequest {
    pub fn new() -> DecodesetupPostRequest {
        DecodesetupPostRequest {
            ch_num: None,
            color_space: None,
            tally_mode: None,
            screen_saver_mode: None,
            ndi_audio: None,
        }
    }
}

